/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
/**
 *
 * @author Hernandez
 */
public class BookCheckIn extends javax.swing.JFrame {

    /**
     * Creates new form BookCheckIn
     */
    public BookCheckIn() {
        initComponents();
    jTable1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // Get the selected row indices
                int[] selectedRows = jTable1.getSelectedRows();

                // You can do something with the selected rows, e.g., display information
                for (int row : selectedRows) {
                    String isbn = jTable1.getValueAt(row, 0).toString();
                    String cardId = jTable1.getValueAt(row, 1).toString();
                }
            }
        });    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(241, 248, 255));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ISBN", "Card ID", "Date Out", "Due Date"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel2.setText("Card ID/ISBN:");
        jLabel2.setToolTipText("");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton2.setText("Check-In");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 933, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 5, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jButton1.setText("x");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(85, 85, 85));
        jLabel1.setText("Check-In");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel1))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Dashboard db = new Dashboard();
        db.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        String searchValue = jTextField1.getText();
        searchAndDisplayResults(searchValue);
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
     // Get the selected row indices
    int[] selectedRows = jTable1.getSelectedRows();
    
    // Check if no rows are selected
    if (selectedRows.length == 0) {
        JOptionPane.showMessageDialog(this, "No books selected for check-in.", "Check-In Message", JOptionPane.INFORMATION_MESSAGE);
        return;  // Exit the method
    }

    // Display the selected books before updating the database
    displaySelectedBooks(selectedRows);

    try (Connection myConn = DriverManager.getConnection("jdbc:mysql://localhost:3306/library?allowMultiQueries=TRUE", "team", "password")) {
        String selectQuery = "SELECT Date_in FROM BOOK_LOANS WHERE ISBN = ? AND Card_id = ?";
        String updateQuery = "UPDATE BOOK_LOANS SET Date_in = CURRENT_DATE WHERE ISBN = ? AND Card_id = ?";
        
        try (PreparedStatement selectStatement = myConn.prepareStatement(selectQuery);
             PreparedStatement updateStatement = myConn.prepareStatement(updateQuery)) {

            // Update Date_in for each selected row
            for (int row : selectedRows) {
                String isbn = jTable1.getValueAt(row, 0).toString();
                String cardId = jTable1.getValueAt(row, 1).toString();

                // Check if the book is already checked in
                if (isBookCheckedIn(isbn, cardId)) {
                    JOptionPane.showMessageDialog(this, "Book with ISBN " + isbn + " and Card ID " + cardId + " is already checked in.", "Check-In Message", JOptionPane.INFORMATION_MESSAGE);
                    continue;  // Skip to the next iteration if the book is already checked in
                }

                // Set parameters for the select query
                selectStatement.setString(1, isbn);
                selectStatement.setString(2, cardId);

                // Execute the select query
                try (ResultSet resultSet = selectStatement.executeQuery()) {
                    if (resultSet.next()) {
                        // Set parameters for the update
                        updateStatement.setString(1, isbn);
                        updateStatement.setString(2, cardId);

                        // Execute the update
                        updateStatement.executeUpdate();
                    }
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }

            // Refresh the table after updating
            String searchValue = jTextField1.getText();
            searchAndDisplayResults(searchValue);
            JOptionPane.showMessageDialog(this, "Selected books have been successfully checked in.", "Check-In Success", JOptionPane.INFORMATION_MESSAGE);
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
    }//GEN-LAST:event_jButton2ActionPerformed

    // Step 1: Create a method to search for BOOK_LOANS tuples
    private void searchAndDisplayResults(String searchValue) {
        DefaultTableModel model = new DefaultTableModel();
        // Add columns to the model as needed
        model.addColumn("ISBN");
        model.addColumn("Card ID");
        model.addColumn("Date Out");
        model.addColumn("Due Date");

        try (Connection myConn = DriverManager.getConnection("jdbc:mysql://localhost:3306/library?allowMultiQueries=TRUE", "team", "password")) {
            String searchQuery = "SELECT * FROM BOOK_LOANS WHERE ISBN LIKE ? OR Card_id LIKE ?";
            try (PreparedStatement searchStatement = myConn.prepareStatement(searchQuery)) {
                // Step 2: Set parameters for the search
                searchStatement.setString(1, "%" + searchValue + "%");
                searchStatement.setString(2, "%" + searchValue + "%");

                try (ResultSet resultSet = searchStatement.executeQuery()) {
                    // Step 3: Display the search results
                    while (resultSet.next()) {
                        String isbn = resultSet.getString("ISBN");
                        String cardid = resultSet.getString("Card_id");
                        Date Dateout = resultSet.getDate("Date_out");
                        Date dueDate = resultSet.getDate("Due_date");

                        model.addRow(new Object[]{isbn, cardid, Dateout, dueDate});
                    }
                }
            }

            // Assuming jTableSearchResults is the name of your table
            jTable1.setModel(model);

        } catch (SQLException e) {
            e.printStackTrace();  // Print the exception details for debugging
        }
    }
    
    // New method to display selected books
private void displaySelectedBooks(int[] selectedRows) {
  StringBuilder message = new StringBuilder("Selected Books:\n");

    for (int row : selectedRows) {
        String isbn = jTable1.getValueAt(row, 0).toString();
        String cardId = jTable1.getValueAt(row, 1).toString();
        message.append("ISBN: ").append(isbn).append(", Card ID: ").append(cardId).append("\n");
    }

    JOptionPane.showMessageDialog(this, message.toString(), "Selected Books", JOptionPane.INFORMATION_MESSAGE);
}

private boolean isBookCheckedIn(String isbn, String cardId) {
    try (Connection myConn = DriverManager.getConnection("jdbc:mysql://localhost:3306/library?allowMultiQueries=TRUE", "team", "password")) {
        String query = "SELECT Date_in FROM BOOK_LOANS WHERE ISBN = ? AND Card_id = ?";
        try (PreparedStatement statement = myConn.prepareStatement(query)) {
            statement.setString(1, isbn);
            statement.setString(2, cardId);
            try (ResultSet resultSet = statement.executeQuery()) {
                return resultSet.next() && resultSet.getDate("Date_in") != null;
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();  // Handle the exception appropriately (log or show an error message)
    }
    return false;  // Default to false if there's an error or if the book is not found
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookCheckIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookCheckIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookCheckIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookCheckIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookCheckIn().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
