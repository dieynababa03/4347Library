/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;
import javax.swing.*;
import java.sql.*;
import java.time.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jeremy
 */
public class Fines extends javax.swing.JFrame {

    /**
     * Creates new form Fines
     */
    private Connection connection;
    
    public Fines() {
        initComponents();
        try {
            connection = DatabaseManager.getConnection();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(241, 248, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getStyle() | java.awt.Font.BOLD, jLabel1.getFont().getSize()+2));
        jLabel1.setForeground(new java.awt.Color(85, 85, 85));
        jLabel1.setText("Fines Management");

        jButton1.setText("x");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton2.setText("UPDATE/VIEW FINES");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(355, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(140, 140, 140)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jLabel1))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(241, 248, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(837, 800));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Borrower Name", "Card Id", "Total Owed"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setRowHeight(26);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book Name", "ISBN", "Returned?", "Owed"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(26);
        jScrollPane1.setViewportView(jTable1);

        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton3.setText("PAY SELECTED TOTAL FINES");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("SELECTED CARD ID:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("[NONE]");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("TOTAL FINES:");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("$0.00");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("Borrower Details:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(476, 476, 476)
                .addComponent(jLabel4)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 823, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jButton3)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addGap(35, 35, 35)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(223, 223, 223)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 856, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 544, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Dashboard db = new Dashboard();
        db.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    public void displayFines() {
        String viewQuery = "SELECT "
            + "CONCAT(borrower.Fname, ' ', borrower.Lname) AS Person_Name, "
            + "borrower.Card_id, "
            + "SUM(fines.Fine_amt) AS Total_Fines "
            + "FROM fines "
            + "JOIN book_loans ON fines.Loan_id = book_loans.Loan_id "
            + "JOIN borrower ON book_loans.Card_id = borrower.Card_id "
            + "WHERE fines.Paid = 0 "
            + "GROUP BY borrower.Card_id, Person_Name "
            + "HAVING Total_Fines > 0.00;";
       
        try (
            PreparedStatement viewStatement = connection.prepareStatement(viewQuery);
            ResultSet viewSet = viewStatement.executeQuery()
        ) {
            DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
            model.setRowCount(0);
            while (viewSet.next()) {
                String personName = viewSet.getString("Person_Name");
                String cardId = viewSet.getString("Card_id");
                double totalFines = viewSet.getDouble("Total_Fines");
                String formattedtotalFines = String.format("$%.2f", totalFines);

                Object[] row = {personName, cardId, formattedtotalFines};
                model.addRow(row);
           
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    public void updateTable() {
       
        try {
            String sql = "SELECT * FROM book_loans";
            try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    while (resultSet.next()) {
                        String loanId = resultSet.getString("Loan_id");
                        java.sql.Date dueDate = resultSet.getDate("Due_date");
                        java.sql.Date inDate = resultSet.getDate("Date_in");
                        Period period;
                        
                        if (resultSet.wasNull()) {
                            // The Date_in column was NULL
                            period = Period.between(dueDate.toLocalDate(), LocalDate.now());
                        } else {
                            // The Date_in column was not NULL
                            period = Period.between(dueDate.toLocalDate(), inDate.toLocalDate());
                        }
                        int daysBetween = period.getDays();
                        double fineAmt = daysBetween * 0.25; // 25 cent rate/day
                        
                        String getCount = "SELECT COUNT(*) AS count FROM fines WHERE Loan_id = '" + loanId + "';";
                        PreparedStatement pStatement = connection.prepareStatement(getCount);
                        ResultSet countSet = pStatement.executeQuery();
                        
                        int count = 0;
                        if (countSet.next()) 
                            count = countSet.getInt("count");
                        
                        if (count > 0) {
                            // check if paid == false
                            int paidValue = 0;
                            String paidQuery = "SELECT paid FROM fines WHERE Loan_id = ?";
                            PreparedStatement paidStmt = connection.prepareStatement(paidQuery);
                            paidStmt.setString(1, loanId);
                            ResultSet paidSet = paidStmt.executeQuery();  
                            if (paidSet.next())
                                paidValue = paidSet.getInt("paid");
                             
                            if (paidValue == 0) {
                                // Record exists and paid == false/0, update the Fine_amt
                                // If paid == true/1 then do nothing
                                String updateQuery = "UPDATE fines SET Fine_amt = ? WHERE Loan_id = ?";
                                try (PreparedStatement updateStmt = connection.prepareStatement(updateQuery)) {
                                    updateStmt.setDouble(1, fineAmt);
                                    updateStmt.setString(2, loanId);
                                    updateStmt.executeUpdate();
                                }
                            }
                            
                        } else {
                            // Record doesn't exist, insert a new record
                            String insertQuery = "INSERT INTO fines (Loan_id, Fine_amt) VALUES (?, ?)";
                            try (PreparedStatement insertStmt = connection.prepareStatement(insertQuery)) {
                                insertStmt.setString(1, loanId);
                                insertStmt.setDouble(2, fineAmt);
                                insertStmt.executeUpdate();
                            }
                        }
                        
                    }
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
         
        displayFines();
        
        DefaultTableModel model2 = (DefaultTableModel)jTable1.getModel();
        model2.setRowCount(0);
        jLabel3.setText("[NONE]");
        jLabel6.setText("$0.00");
    }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        updateTable();
    }//GEN-LAST:event_jButton2ActionPerformed

    public boolean checkIfAllReturned(String cardId) {
        String query = "SELECT Date_in FROM book_loans "
                + "WHERE Card_id = ?;";
        try (
            PreparedStatement queryStatement = connection.prepareStatement(query)
        ) {
            queryStatement.setString(1, cardId);

            try (ResultSet resSet = queryStatement.executeQuery()) {
                while (resSet.next()) {            
                    if (resSet.wasNull()) {
                        return false;
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return true;
    }
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String cardId = jLabel3.getText();
        if (cardId.length() != 8) {
            JOptionPane.showMessageDialog(null, "No Selection Was Made");
            return; // Exit the method if the cardId length is not 8
        }
        
        if (!checkIfAllReturned(cardId)) {
            JOptionPane.showMessageDialog(null, "One or more books have not been returned.");
            return;
        }
            
        String payFines =
                "UPDATE fines "
                + "SET Paid = 1 "
                + "WHERE Loan_id IN (SELECT Loan_id FROM book_loans WHERE Card_id = ?)";

        try (PreparedStatement payStatement = connection.prepareStatement(payFines)) {
            payStatement.setString(1, cardId);
            int rowsUpdated = payStatement.executeUpdate();

            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(null, "Fines Paid Successfully");
            } else {
                JOptionPane.showMessageDialog(null, "No matching records found for cardId");
            }
            jLabel3.setText("[NONE]");
            updateTable();
            DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
            model.setRowCount(0);
            
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error occurred while updating fines");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

public void showBooks(String cardID) {
    String query = "SELECT book_loans.Isbn, Title, Date_in, Fine_amt "
            + "FROM book_loans "
            + "JOIN book ON book_loans.Isbn = book.Isbn "
            + "JOIN fines ON book_loans.Loan_id = fines.Loan_id "
            + "WHERE book_loans.Card_id = ?";

    try (
        PreparedStatement queryStatement = connection.prepareStatement(query)
    ) {
        queryStatement.setString(1, cardID);

        try (ResultSet resSet = queryStatement.executeQuery()) {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            while (resSet.next()) {
                String bookName = resSet.getString("Title");
                String Isbn = resSet.getString("Isbn");
                double fine = resSet.getDouble("Fine_amt");
                String formattedFine = String.format("$%.2f", fine);
                String date_in = resSet.getString("Date_in");

                // Set date_in to "No" if it's null
                if (resSet.wasNull()) {
                    date_in = "No";
                }
                else
                    date_in = "Yes";

                Object[] row = {bookName, Isbn, date_in, formattedFine};
                model.addRow(row);
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
}

    
    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        int row = jTable2.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
        String cardID = model.getValueAt(row, 1).toString();
        String total = model.getValueAt(row, 2).toString();
        jLabel3.setText(cardID);
        jLabel6.setText(total);
        showBooks(cardID);
    }//GEN-LAST:event_jTable2MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Fines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Fines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Fines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Fines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Fines().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
